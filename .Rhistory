ggtitle('Pickups by Borough') +
ylab('Number of Pickups \n (Log Scale)') +
guides(fill = 'none') +
ggsave('graphs/total_pickups_per_borough.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber_known,
aes(x = Borough)) +
geom_bar(fill='royalblue') +
coord_flip() +
scale_fill_brewer(type = 'qual',
palette = 4) +
scale_y_continuous(trans = 'log',
labels = comma,
breaks = 10^seq(1, 7)) +
ggtitle('Pickups by Borough') +
ylab('Number of Pickups \n (Log Scale)') +
guides(fill = 'none') +
ggsave('graphs/total_pickups_per_borough.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber_known,
aes(x = Borough)) +
geom_bar(fill='royalblue') +
coord_flip() +
ggtitle('Pickups by Borough') +
ylab('Number of Pickups \n (Log Scale)') +
guides(fill = 'none') +
ggsave('graphs/total_pickups_per_borough.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber,
aes(x = hour)) +
geom_histogram(binwidth = 1,
color = 'navyblue') +
scale_x_continuous(breaks = seq(0,18,6)) +
ggtitle('Hourly Pickups by Day') +
guides(color = F) +
xlab('Time') +
ylab('Number of Pickups') +
facet_wrap(~ day) +
ggsave('graphs/hourly_pickups_by_day_histogram.png',
width = 12,
height = 8,
units = 'in')
ggplot(uber,
aes(x = hour)) +
geom_histogram(binwidth = 1,
color = 'navyblue') +
scale_x_continuous(breaks = seq(0,18,6)) +
scale_color_brewer(type = 'qual', palette = 1) +
ggtitle('Hourly Pickups by Day') +
guides(color = F) +
xlab('Time') +
ylab('Number of Pickups') +
facet_wrap(~ day) +
ggsave('graphs/hourly_pickups_by_day_histogram.png',
width = 12,
height = 8,
units = 'in')
ggplot(uber,
aes(x = hour)) +
geom_histogram(binwidth = 1,
color = 'royalblue') +
scale_x_continuous(breaks = seq(0,18,6)) +
ggtitle('Hourly Pickups by Day') +
guides(color = F) +
xlab('Time') +
ylab('Number of Pickups') +
facet_wrap(~ day) +
ggsave('graphs/hourly_pickups_by_day_histogram.png',
width = 12,
height = 8,
units = 'in')
ggplot(uber.by_day,
aes(x = day,
y = rides)) +
geom_boxplot(color='royalblue') +
scale_y_continuous(labels = comma,
breaks = seq(0, 150000, 25000)) +
ggtitle('Pickups per Day') +
guides(color = 'none') +
xlab('Day') +
ylab('Number of Pickups') +
ggsave('graphs/pickups_per_day_boxplot.png',
width = 10,
height = 6,
units = 'in')
# Number of pickups over time colored by day
ggplot(uber,
aes(x = date)) +
geom_histogram(binwidth = 1,
aes(fill = day)) +
scale_x_continuous(breaks = seq(7, 28, 7)) +
scale_y_continuous(labels = comma) +
scale_fill_brewer(type = 'seq', palette = 18) +
ggtitle('Monthly Pickups Colored by Day') +
labs(fill = 'Day') +
xlab('Date') +
ylab('Number of Pickups') +
facet_wrap(~ month) +
ggsave('graphs/monthly_pickups_histogram.png',
width = 12,
height = 8,
units = 'in')
by(uber.by_day$rides, uber.by_day$day, summary)
ggplot(uber_known.by_loc,
aes(x = Borough,
y = rides)) +
geom_boxplot(color='royalblue') +
scale_y_log10(labels = comma,
breaks = c(100, 1000, 10000, 100000, 500000)) +
scale_color_brewer(type = 'qual',
palette = 6) +
guides(color = 'none') +
ggtitle('Pickups by Location') +
ylab('Number of Pickups \n (Binned by Zone)') +
ggsave('graphs/pickups_by_location_boxplot.png',
width = 12,
height = 8,
units = 'in')
save(taxi_lookup,
file = file.path('/Users/courtneyfergusonlee/p4/data/uber.RData'))
shape(taxi_lookup)
summary(taxi_lookup)
# Map Scatterplot of New York Pickups
lon_left <- min(uber_known$lon)
lon_right <- max(uber_known$lon)
lat_bottom <- min(uber_known$lat)
lat_top <- max(uber_known$lat)
my_breaks = c(400000,
100000,
50000,
10000,
1000,
100)
nyc <- get_map(location = c(lon_left,
lat_bottom,
lon_right,
lat_top),
source = 'stamen',
maptype = 'toner')
nycMap <- ggmap(nyc,
extent = "panel")
nycMap +
geom_point(aes(x = lon,
y = lat,
size = rides,
color = rides,
alpha = .5),
#alpha = .01,
data = uber_known.by_loc) +
scale_color_gradientn(trans = "log10",
guide = 'legend',
guide_colorbar(title = 'Pickups'),
breaks = my_breaks,
labels = comma, my_breaks,
colors = colorRampPalette(bias = .45,
rev(brewer.pal(11,
'RdYlGn')))(100)) +
ggtitle('Uber Pickups Scatterplot Map') +
scale_size(guide = 'none',
breaks = my_breaks) +
guides(alpha = F)
load('data/uber.RData', .GlobalEnv)
View(taxi_lookup)
summary(taxi_lookup)
View(taxi_lookup)
load('uber_git.RData', .GlobalEnv)
summary(taxi_lookup)
# Map Scatterplot of New York Pickups
lon_left <- min(uber_known$lon)
lon_right <- max(uber_known$lon)
lat_bottom <- min(uber_known$lat)
lat_top <- max(uber_known$lat)
my_breaks = c(400000,
100000,
50000,
10000,
1000,
100)
nyc <- get_map(location = c(lon_left,
lat_bottom,
lon_right,
lat_top),
source = 'stamen',
maptype = 'toner')
nycMap <- ggmap(nyc,
extent = "panel")
nycMap +
geom_point(aes(x = lon,
y = lat,
size = rides,
color = rides,
alpha = .5),
#alpha = .01,
data = uber_known.by_loc) +
scale_color_gradientn(trans = "log10",
guide = 'legend',
guide_colorbar(title = 'Pickups'),
breaks = my_breaks,
labels = comma, my_breaks,
colors = colorRampPalette(bias = .45,
rev(brewer.pal(11,
'RdYlGn')))(100)) +
ggtitle('Uber Pickups Scatterplot Map') +
scale_size(guide = 'none',
breaks = my_breaks) +
guides(alpha = F)
View(taxi_lookup)
View(taxi_lookup)
# Read csv's and load taxi lookup data
setwd('/Users/courtneyfergusonlee/p4')
uber <- read.csv('data/uber-raw-data-janjune-15.csv')
taxi_lookup <- read.csv('data/taxi-zone-lookup.csv', stringsAsFactors = F)
# Load from RData file until ready to knit
load('data/uber.RData', .GlobalEnv)
"
# Edit Zones for more accurate location results
taxi_lookup[17, 3] <- 'Bedford-Stuyvesant'
taxi_lookup[23, 3] <- 'Bloomfield'
taxi_lookup[81, 3] <- 'Eastchester, Bronx'
# Get latitude and longitude info for location data (Long Process)
citystate = 'new york city new york'
taxi_lookup <- mutate(taxi_lookup,
lat = geocode(paste(Zone, citystate, sep = ', '), output = 'latlon')$lat,
lon = geocode(paste(Zone, citystate, sep = ', '), output = 'latlon')$lon)
# Check for missing latitude or longitude data
taxi_lookup.lat_na <- subset(taxi_lookup, is.na(lat))
taxi_lookup.lon_na <- subset(taxi_lookup, is.na(lon))
# If there's missing data, need to rename variables and replace values as nec.
names(taxi_lookup.lat_na) <- c('LocationID',
'Borough',
'Zone',
'latitude',
'longitude')
names(taxi_lookup.lon_na) <- c('LocationID',
'Borough',
'Zone',
'latitude',
'longitude')
# Lookup missing values in bulk, check for warnings
taxi_lookup.lat_na <- mutate(taxi_lookup.lat_na,
latitude = geocode(paste(Zone, citystate, sep = ', '),
output = 'latlon')$lat)
taxi_lookup.lon_na <- mutate(taxi_lookup.lon_na,
longitude = geocode(paste(Zone, citystate, sep = ', '),
output = 'latlon')$lon)
# Replace missing values CAREFULLY (Lookup is a long process)
taxi_lookup[taxi_lookup.lat_na$LocationID, 4] <- taxi_lookup.lat_na$latitude
taxi_lookup[taxi_lookup.lon_na$LocationID, 5] <- taxi_lookup.lon_na$longitude
"
# Grab samples to lighten system load and run tests
set.seed(420)
uber_sample <- uber[sample(1:length(uber$locationID), 100000), ]
# Create Zone, Borough, lat, lon, hour, day, month and date variables
uber_sample <- uber_sample %>%
inner_join(taxi_lookup,
by = c('locationID' = 'LocationID')) %>%
mutate(Pickup_date = ymd_hms(Pickup_date),
hour = hour(Pickup_date),
day = wday(Pickup_date, label = T, abbr = F),
day = ordered(day, levels = c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday')),
month = month(Pickup_date, label = T, abbr = F),
date = day(Pickup_date),
Borough = as.factor(Borough),
Zone = as.factor(Zone),
locationID = as.factor(locationID)) %>%
droplevels()
# Known locations needeed for map
uber_sample_known <- uber_sample %>%
filter(Borough != 'Unknown' & Borough != 'EWR') %>% # EWR is NJ
droplevels()
# Create Zone, Borough, lat, lon, hour, day, month and date variables
uber <- uber %>%
inner_join(taxi_lookup,
by = c('locationID' = 'LocationID')) %>%
mutate(Pickup_date = ymd_hms(Pickup_date),
hour = hour(Pickup_date),
day = wday(Pickup_date, label = T, abbr = F),
day = ordered(day, levels = c('Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday')),
month = month(Pickup_date, label = T, abbr = F),
date = day(Pickup_date),
Borough = as.factor(Borough),
Zone = as.factor(Zone),
locationID = as.factor(locationID)) %>%
droplevels()
# Filter known boroughs for location analyses
uber_known <- uber %>%
filter(Borough != 'Unknown' & Borough != 'EWR') %>% # EWR is NJ
droplevels()
# Create month tables for quicker execution
uber_jan <- uber %>%
filter(month == 'January')
uber_feb <- uber %>%
filter(month == 'February')
uber_mar <- uber %>%
filter(month == 'March')
uber_apr <- uber %>%
filter(month == 'April')
uber_may <- uber %>%
filter(month == 'May')
uber_jun <- uber %>%
filter(month == 'June')
# Create Saturday tables to make comparisons
saturday_rides <- uber%>%
filter(day == 'Saturday') %>%
group_by(month, date, day, hour) %>%
summarise(rides = n()) %>%
ungroup()
saturday_ave <- saturday_rides %>%
group_by(day, hour) %>%
summarise(ave_rides = mean(rides))
# Create individual date tables for comparisons
may_16.by_hour <- uber_may %>%
filter(date == 16) %>%
group_by(month, date, day, hour) %>%
summarise(rides = n()) %>%
ungroup() %>%
inner_join(saturday_ave)
may_23.by_hour <- uber_may %>%
filter(date == 23) %>%
group_by(month, date, day, hour) %>%
summarise(rides = n()) %>%
ungroup() %>%
inner_join(saturday_ave)
june_27.by_hour <- uber_jun %>%
filter(date == 27) %>%
group_by(month, date, day, hour) %>%
summarise(rides = n()) %>%
ungroup() %>%
inner_join(saturday_ave)
# Bin by quarter hour, half hour, hour and day, turning rides into a variable
uber.by_quarter_hour <- uber %>%
mutate(minute = minute(Pickup_date),
quarter_hour = floor(minute/15) * 15,
hour_plus_quarter = hour + quarter_hour/60) %>%
group_by(month,
date,
day,
hour,
hour_plus_quarter) %>%
summarise(rides = n()) %>%
ungroup()
uber.by_half_hour <- uber %>%
mutate(minute = minute(Pickup_date),
half_hour = floor(minute/30) * 30,
hour_plus_half = hour + half_hour/60) %>%
group_by(month,
date,
day,
hour,
hour_plus_half) %>%
summarise(rides = n()) %>%
ungroup()
uber.by_hour <- uber %>%
group_by(month,
date,
day,
hour) %>%
summarise(rides = n()) %>%
ungroup()
uber.by_day <- uber %>%
group_by(month,
date,
day) %>%
summarise(rides = n()) %>%
ungroup()
# Bin by location for map scatter plot and location boxplot
uber_known.by_loc <- uber_known %>%
group_by(Zone) %>%
summarise(rides = n()) %>%
inner_join(taxi_lookup) %>%
ungroup()
# Bin by hour and location
uber_known.by_hour_borough <- uber_known %>%
group_by(month,
date,
day,
hour,
Borough) %>%
summarise(rides = n()) %>%
ungroup()
# Map Scatterplot of New York Pickups
lon_left <- min(uber_known$lon)
lon_right <- max(uber_known$lon)
lat_bottom <- min(uber_known$lat)
lat_top <- max(uber_known$lat)
my_breaks = c(400000,
100000,
50000,
10000,
1000,
100)
nyc <- get_map(location = c(lon_left,
lat_bottom,
lon_right,
lat_top),
source = 'stamen',
maptype = 'toner')
nycMap <- ggmap(nyc,
extent = 'panel')
nycMap +
geom_point(aes(x = lon,
y = lat,
size = rides,
color = rides,
alpha = .5),
#alpha = .01,
data = uber_known.by_loc) +
scale_color_gradientn(trans = 'log10',
guide = 'legend',
guide_colorbar(title = 'Pickups'),
breaks = my_breaks,
labels = comma, my_breaks,
colors = colorRampPalette(bias = .45,
rev(brewer.pal(11,
'RdYlGn')))(100)) +
ggtitle('Uber Pickups Scatterplot Map') +
scale_size(guide = 'none',
breaks = my_breaks) +
guides(alpha = F)
ggplot(uber.by_hour,
aes(x = rides)) +
geom_histogram(binwidth = 200,
color='royalblue') +
ggtitle('Pickups per Hour Histogram') +
xlab('Pickups per Hour') +
ylab('Frequency') +
ggsave('graphs/pickups_per_hour_histogram.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber.by_hour,
aes(x = rides)) +
geom_histogram(color='blue4') +
ggtitle('Pickups per Hour Histogram') +
labs(subtitle = 'Log Scale x-axis') +
scale_x_log10() +
xlab('Pickups per Hour \n (log scale)') +
ylab('Frequency') +
ggsave('graphs/pickups_per_hour_histogram_log_scale.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber.by_hour,
aes(x = rides)) +
geom_histogram(color='royalblue') +
ggtitle('Pickups per Hour Histogram') +
labs(subtitle = 'Log Scale x-axis') +
scale_x_log10() +
xlab('Pickups per Hour \n (log scale)') +
ylab('Frequency') +
ggsave('graphs/pickups_per_hour_histogram_log_scale.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber,
aes(x = day)) +
geom_bar(color='royalblue') +
scale_fill_brewer(type = 'seq',
palette = 2) +
ggtitle('Total Pickups by Day') +
ylab('Number of Pickups') +
xlab('Day') +
guides(fill = 'none') +
ggsave('graphs/total_pickups_by_day_barchart.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber,
aes(x = day)) +
geom_bar(fill='royalblue') +
scale_fill_brewer(type = 'seq',
palette = 2) +
ggtitle('Total Pickups by Day') +
ylab('Number of Pickups') +
xlab('Day') +
guides(fill = 'none') +
ggsave('graphs/total_pickups_by_day_barchart.png',
width = 10,
height = 6,
units = 'in')
ggplot(uber,
aes(x = hour)) +
geom_histogram(binwidth = 1,
color = 'royalblue') +
scale_x_continuous(breaks = seq(0,18,6)) +
ggtitle('Hourly Pickups by Day') +
guides(color = F) +
xlab('Time') +
ylab('Number of Pickups') +
facet_wrap(~ day) +
ggsave('graphs/hourly_pickups_by_day_histogram.png',
width = 12,
height = 8,
units = 'in')
